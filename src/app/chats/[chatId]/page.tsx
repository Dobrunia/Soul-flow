'use client';

import { useParams, notFound } from 'next/navigation';
import { Message, MessageContainer, Avatar, Row } from 'dobruniaui';
import MessageInput from './MessageInput';

interface MessageData {
  id: string;
  type: 'incoming' | 'outgoing';
  text: string;
  time: string;
  sender?: {
    id: string;
    name: string;
    avatar?: string;
  };
  isRead?: boolean;
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è chatId
const isValidChatId = (chatId: string): boolean => {
  // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, –¥–ª–∏–Ω–∞ 1-50
  const chatIdRegex = /^[a-zA-Z0-9_-]{1,50}$/;
  return chatIdRegex.test(chatId);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É (mock)
const hasAccessToChat = (chatId: string, userId: string): boolean => {
  // TODO: –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
  const allowedChats = ['1', '2', '3', 'general', 'team-chat'];
  return allowedChats.includes(chatId);
};

const mockMessages: MessageData[] = [
  {
    id: '1',
    type: 'incoming',
    text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
    time: '12:30',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '2',
    type: 'outgoing',
    text: '–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?',
    time: '12:32',
    isRead: true,
  },
  {
    id: '3',
    type: 'incoming',
    text: '–¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º',
    time: '12:35',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: false,
  },
  {
    id: '4',
    type: 'outgoing',
    text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
    time: '12:36',
    isRead: true,
  },
  {
    id: '5',
    type: 'incoming',
    text: '–≠—Ç–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ React –∏ Next.js. –ò—Å–ø–æ–ª—å–∑—É—é –Ω–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ dobruniaui',
    time: '12:38',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '6',
    type: 'outgoing',
    text: '–ó–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ! üöÄ',
    time: '12:39',
    isRead: true,
  },
  {
    id: '7',
    type: 'incoming',
    text: '–î–∞, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ. –ï—Å—Ç—å —á–∞—Ç—ã, —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–∞–∫—Ü–∏–∏...',
    time: '12:41',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '8',
    type: 'outgoing',
    text: '–ê —á—Ç–æ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é?',
    time: '12:42',
    isRead: true,
  },
  {
    id: '9',
    type: 'incoming',
    text: '–û—Ç–ª–∏—á–Ω–∞—è! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–∂–µ–∫—Ç CSS, –Ω–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
    time: '12:44',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '10',
    type: 'outgoing',
    text: '–ú–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é?',
    time: '12:45',
    isRead: true,
  },
  {
    id: '11',
    type: 'incoming',
    text: '–ö–æ–Ω–µ—á–Ω–æ! https://www.npmjs.com/package/dobruniaui',
    time: '12:46',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '12',
    type: 'outgoing',
    text: '–°–ø–∞—Å–∏–±–æ! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á—É üìö',
    time: '12:47',
    isRead: true,
  },
  {
    id: '13',
    type: 'incoming',
    text: '–ö—Å—Ç–∞—Ç–∏, —É –Ω–∏—Ö –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º –∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö',
    time: '12:49',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '14',
    type: 'outgoing',
    text: '–≠—Ç–æ —Ç–æ —á—Ç–æ –Ω—É–∂–Ω–æ! –ù–∞—à –¥–∏–∑–∞–π–Ω–µ—Ä –±—É–¥–µ—Ç –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ üé®',
    time: '12:50',
    isRead: true,
  },
  {
    id: '15',
    type: 'incoming',
    text: '–ê –µ—â–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç TypeScript –∏–∑ –∫–æ—Ä–æ–±–∫–∏',
    time: '12:52',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '16',
    type: 'outgoing',
    text: 'Perfect! –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –º–Ω–æ–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã üíØ',
    time: '12:53',
    isRead: true,
  },
  {
    id: '17',
    type: 'incoming',
    text: '–î–∞, –∏ –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ. IntelliSense –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–ø—Å—ã',
    time: '12:55',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '18',
    type: 'outgoing',
    text: '–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞?',
    time: '12:56',
    isRead: true,
  },
  {
    id: '19',
    type: 'incoming',
    text: '–ß–µ—Ä–µ–∑ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è. –°–µ–π—á–∞—Å –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase',
    time: '12:58',
    sender: {
      id: '2',
      name: '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫',
    },
    isRead: true,
  },
  {
    id: '20',
    type: 'outgoing',
    text: '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! Supabase + Next.js - –º–æ—â–Ω–∞—è —Å–≤—è–∑–∫–∞ üî•',
    time: '13:00',
    isRead: false,
  },
];

export default function ChatPage() {
  const params = useParams();
  const rawChatId = params?.chatId as string;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è chatId
  if (!rawChatId || !isValidChatId(rawChatId)) {
    notFound(); // –ü–æ–∫–∞–∑–∞—Ç—å 404 —Å—Ç—Ä–∞–Ω–∏—Ü—É
  }

  const chatId = rawChatId;
  const currentUserId = '1'; // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
  if (!hasAccessToChat(chatId, currentUserId)) {
    notFound(); // –ò–ª–∏ –º–æ–∂–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
  }

  const handleSendMessage = (message: string) => {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  };

  const handleReaction = (emoji: string, messageId: string) => {
    console.log('–†–µ–∞–∫—Ü–∏—è:', emoji, '–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageId);
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  };

  return (
    <div className='flex-1 flex flex-col bg-[var(--c-bg-default)] h-full'>
      {/* –®–∞–ø–∫–∞ —á–∞—Ç–∞ */}
      <Row
        left={<Avatar name={`–ß–∞—Ç ${chatId}`} size='md' status='online' showStatus />}
        center={
          <div className='align-left w-full'>
            <h2 className='font-medium'>–ß–∞—Ç #{chatId}</h2>
            <p className='text-sm text-[var(--c-text-secondary)]'>–æ–Ω–ª–∞–π–Ω</p>
          </div>
        }
        className='bg-[var(--c-bg-subtle)] border-b border-[var(--c-border)]'
      />

      {/* –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <MessageContainer
        autoScrollToBottom={true}
        lastMessageId={mockMessages[mockMessages.length - 1]?.id}
      >
        {mockMessages.map((msg) => (
          <Message
            key={msg.id}
            type={msg.type}
            text={msg.text}
            time={msg.time}
            sender={msg.sender}
            isRead={msg.isRead}
            currentUserId={currentUserId}
            reactionEmojis={['‚ù§Ô∏è', 'üòÇ', 'üëç', 'üî•']}
            onReaction={(emoji: string) => handleReaction(emoji, msg.id || '')}
            showActionsOnClick={true}
          />
        ))}
      </MessageContainer>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <MessageInput onSendMessage={handleSendMessage} />
    </div>
  );
}
