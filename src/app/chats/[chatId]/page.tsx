'use client';

import { useParams, notFound } from 'next/navigation';
import { useState, useEffect } from 'react';
import {
  Message,
  MessageContainer,
  Avatar,
  Row,
  type MessageProps,
  LoadingSpinner,
} from 'dobruniaui';
import MessageInput from './MessageInput';
import { createBrowserClient } from '@/shared/lib/supabase';

interface ChatData {
  id: string;
  name: string;
  type: 'direct' | 'group';
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è chatId (UUID —Ñ–æ—Ä–º–∞—Ç)
const isValidChatId = (chatId: string): boolean => {
  // UUID —Ñ–æ—Ä–º–∞—Ç: 8-4-4-4-12 —Å–∏–º–≤–æ–ª–æ–≤
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
  return uuidRegex.test(chatId);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ Supabase
const checkChatAccess = async (chatId: string, userId: string): Promise<boolean> => {
  const supabase = createBrowserClient();

  const { data, error } = await supabase
    .from('chat_participants')
    .select('id')
    .eq('chat_id', chatId)
    .eq('user_id', userId)
    .single();

  return !error && !!data;
};

export default function ChatPage() {
  const params = useParams();
  const rawChatId = params?.chatId as string;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è chatId
  if (!rawChatId || !isValidChatId(rawChatId)) {
    notFound(); // –ü–æ–∫–∞–∑–∞—Ç—å 404 —Å—Ç—Ä–∞–Ω–∏—Ü—É
  }

  const chatId = rawChatId;
  const currentUserId = '1'; // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ useEffect)
  const [hasAccess, setHasAccess] = useState<boolean | null>(null);
  const [messages, setMessages] = useState<MessageProps[]>([]);
  const [chat, setChat] = useState<ChatData | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const loadChatData = async () => {
      const supabase = createBrowserClient();

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();
      if (userError || !user) {
        notFound();
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
      const access = await checkChatAccess(chatId, user.id);
      if (!access) {
        notFound();
        return;
      }

      setHasAccess(true);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      const { data: chatData } = await supabase
        .from('chats')
        .select('id, name, type')
        .eq('id', chatId)
        .single();

      if (chatData) {
        setChat(chatData);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const { data: messagesData } = await supabase
        .from('messages')
        .select(
          `
          id,
          content,
          created_at,
          sender_id,
          status,
          profiles!inner(full_name)
        `
        )
        .eq('chat_id', chatId)
        .order('created_at', { ascending: true });

      if (messagesData) {
        const formattedMessages: MessageProps[] = messagesData.map((msg) => ({
          id: msg.id,
          type: msg.sender_id === user.id ? 'outgoing' : 'incoming',
          text: msg.content,
          time: new Date(msg.created_at).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          }),
          sender:
            msg.sender_id !== user.id
              ? {
                  id: msg.sender_id,
                  name: (msg.profiles as any)?.full_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                }
              : undefined,
          isRead: msg.status === 'read',
        }));

        setMessages(formattedMessages);
      }

      setIsLoading(false);
    };

    loadChatData();
  }, [chatId]);

  const handleSendMessage = (message: string) => {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  };

  const handleReaction = (emoji: string, messageId: string) => {
    console.log('–†–µ–∞–∫—Ü–∏—è:', emoji, '–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:', messageId);
    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
  if (hasAccess === null || isLoading) {
    return (
      <div className='flex-1 flex items-center justify-center'>
        <LoadingSpinner size='large' />
      </div>
    );
  }

  return (
    <div className='flex-1 flex flex-col bg-[var(--c-bg-default)] h-full'>
      {/* –®–∞–ø–∫–∞ —á–∞—Ç–∞ */}
      <Row
        left={<Avatar name={chat?.name || '–ß–∞—Ç'} size='md' status='online' showStatus />}
        center={
          <div className='align-left w-full'>
            <h2 className='font-medium'>{chat?.name || '–ß–∞—Ç'}</h2>
          </div>
        }
        className='bg-[var(--c-bg-subtle)] border-b border-[var(--c-border)]'
      />

      {/* –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <MessageContainer autoScrollToBottom={true} lastMessageId={messages[messages.length - 1]?.id}>
        {messages.map((msg) => (
          <Message
            key={msg.id}
            {...msg}
            currentUserId={currentUserId}
            reactionEmojis={['‚ù§Ô∏è', 'üòÇ', 'üëç', 'üî•']}
            onReaction={(emoji: string) => handleReaction(emoji, msg.id || '')}
            showActionsOnClick={true}
          />
        ))}
      </MessageContainer>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <MessageInput onSendMessage={handleSendMessage} />
    </div>
  );
}
