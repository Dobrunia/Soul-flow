'use client';

import { useParams, notFound } from 'next/navigation';
import { useEffect, useMemo } from 'react';
import { Message, Avatar, Row, LoadingSpinner, Button, Alert } from 'dobruniaui';
import MessageInput from './MessageInput';
import type { Profile } from '@/types/types';
import { useSelector, useDispatch } from 'react-redux';
import { selectProfile, selectProfileLoading } from '@/shared/store/profileSlice';
import {
  fetchChatParticipants,
  selectAllParticipants,
  selectParticipantLoading,
  selectParticipantError,
} from '@/shared/store/participantSlice';
import { fetchChat, selectChatById, selectChatLoaded } from '@/shared/store/chatSlice';
import {
  fetchChatMessages,
  selectChatMessages,
  selectMessageLoading,
  selectMessageError,
  addMessage,
} from '@/shared/store/messageSlice';
import type { AppDispatch, RootState } from '@/shared/store';
import { store } from '@/shared/store';
import { statusService } from '@/shared/lib/supabase/Classes/realtime';

const isUUID = (s: string) =>
  /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(s);

export default function ChatPage() {
  const { chatId: rawChatId } = useParams() as { chatId?: string };
  const dispatch = useDispatch<AppDispatch>();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chatId
  const isValidChatId = rawChatId && isUUID(rawChatId);
  const chatId = isValidChatId ? rawChatId : '';

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
  const me = useSelector(selectProfile);
  const profileLoading = useSelector(selectProfileLoading);
  const currentChat = useSelector((state: RootState) => selectChatById(state, chatId));
  const chatLoaded = useSelector((state: RootState) => selectChatLoaded(state, chatId));
  const allChatMessages = useSelector(selectChatMessages);
  const allParticipants = useSelector(selectAllParticipants);
  const messageLoading = useSelector(selectMessageLoading);
  const messageError = useSelector(selectMessageError);
  const participantLoading = useSelector(selectParticipantLoading);
  const participantError = useSelector(selectParticipantError);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  const chatMessages = useMemo(() => allChatMessages[chatId] || [], [allChatMessages, chatId]);

  const participants = useMemo(() => allParticipants[chatId] || [], [allParticipants, chatId]);

  const companion = useMemo(
    () => participants.find((p: Profile) => p.id !== me?.id) || null,
    [participants, me?.id]
  );

  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!isValidChatId || !me?.id || profileLoading) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!chatLoaded) {
      dispatch(fetchChat(chatId));
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1 —Ç–∫ –≤ —á–∞—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chatList
    if (chatMessages.length <= 1) {
      dispatch(fetchChatMessages({ chatId, messageLimit: 50 }));
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!participants.length) {
      dispatch(fetchChatParticipants(chatId));
    }
  }, [
    chatId,
    isValidChatId,
    me?.id,
    profileLoading,
    chatLoaded,
    chatMessages.length,
    participants.length,
    dispatch,
  ]);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    if (!isValidChatId || !me?.id) return;

    console.log('üîî Subscribing to new messages for chat:', chatId);

    statusService.subscribeToTable('messages', 'INSERT', (payload) => {
      console.log('üì® New message received:', payload);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
      if (payload.new.chat_id === chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å—Ç–æ—Ä–∞
        const state = store.getState();
        const currentParticipants = state.participant.participants[chatId] || [];

        // –ò—â–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        const sender = currentParticipants.find((p) => p.id === payload.new.sender_id) || {
          id: payload.new.sender_id,
          email: 'unknown@example.com',
          username: 'Unknown',
          avatar_url: null,
          status: 'offline' as const,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };

        console.log('üîç Sender found:', sender);
        console.log('üîç Participants found:', currentParticipants);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä
        dispatch(
          addMessage({
            chatId,
            message: {
              id: payload.new.id,
              chat_id: payload.new.chat_id,
              sender_id: payload.new.sender_id,
              content: payload.new.content,
              message_type: payload.new.message_type,
              status: payload.new.status,
              created_at: payload.new.created_at,
              updated_at: payload.new.updated_at,
              sender,
            },
          })
        );
      }
    });

    return () => {
      console.log('üîï Unsubscribing from messages');
      statusService.unsubscribeFromChannel('messages:INSERT');
    };
  }, [chatId, isValidChatId, me?.id, dispatch]);

  const loading = messageLoading || participantLoading;
  const error = messageError || participantError;

  // –†–∞–Ω–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã
  if (!isValidChatId) notFound();
  if (!me?.id) return null;

  if (loading && !error) {
    return (
      <div className='flex-1 flex items-center justify-center'>
        <LoadingSpinner size='large' />
      </div>
    );
  }

  if (error) {
    return (
      <div className='flex-1 flex items-center justify-center'>
        <div className='text-center'>
          <Alert type='error'>{error}</Alert>
          <Button onClick={() => window.location.reload()} className='mt-4'>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className='flex flex-col h-full'>
      <Row
        left={
          <Avatar
            name={companion?.username ?? ''}
            src={companion?.avatar_url ?? undefined}
            size='md'
            status={companion?.status || 'offline'}
            showStatus
          />
        }
        center={
          <h2 className='font-medium'>
            {currentChat?.type === 'direct' ? companion?.username : currentChat?.name || '–ß–∞—Ç'}
          </h2>
        }
        className='border-b border-[var(--c-border)]'
        centerJustify='left'
      />
      <MessageInput>
        {chatMessages.map((m: any) => (
          <Message
            key={m.id}
            showActionsOnClick
            type={m.sender_id === me.id ? 'outgoing' : 'incoming'}
            text={m.content}
            time={new Date(m.created_at).toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit',
            })}
            sender={{
              id: m.sender_id,
              name: m.sender?.username ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
              avatar: m.sender?.avatar_url ?? undefined,
            }}
            isRead={m.sender_id === me.id ? m.status === 'read' : undefined}
          />
        ))}
      </MessageInput>
    </div>
  );
}
