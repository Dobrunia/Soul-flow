'use client';

import { useEffect, useMemo } from 'react';
import { ChatList as DobrunniaChatList, LoadingSpinner, Alert } from 'dobruniaui';
import { useSelector, useDispatch } from 'react-redux';
import { selectProfile } from '@/shared/store/profileSlice';
import {
  selectChats,
  selectChatLoading,
  selectChatError,
  selectChatsLoaded,
  fetchChats,
} from '@/shared/store/chatSlice';
import {
  selectLastMessages,
  selectLastMessageLoaded,
  fetchLastMessage,
} from '@/shared/store/messageSlice';
import {
  selectAllParticipants,
  selectChatParticipantsLoaded,
  fetchChatParticipants,
  updateUserStatus,
} from '@/shared/store/participantSlice';
import { useRouter, usePathname } from 'next/navigation';
import type { AppDispatch } from '@/shared/store';
import type { ChatListItem } from 'dobruniaui';
import { statusService } from '@/shared/lib/supabase/Classes/realtime';

export default function ChatList() {
  const router = useRouter();
  const pathname = usePathname();
  const dispatch = useDispatch<AppDispatch>();
  const me = useSelector(selectProfile);
  const chats = useSelector(selectChats);
  const loading = useSelector(selectChatLoading);
  const error = useSelector(selectChatError);
  const chatsLoaded = useSelector(selectChatsLoaded);
  const lastMessages = useSelector(selectLastMessages);
  const allParticipants = useSelector(selectAllParticipants);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π chatId –∏–∑ URL
  const selectedId = pathname.startsWith('/chats/') ? pathname.split('/')[2] : null;

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î –≤ UI —Ñ–æ—Ä–º–∞—Ç
  const chatItems: ChatListItem[] = useMemo(() => {
    return chats.map((chat) => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
      const chatLastMessage = lastMessages[chat.id];
      const chatParticipants = allParticipants[chat.id];

      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è direct —á–∞—Ç–∞
      let companion = undefined;
      if (chat.type === 'direct' && chatParticipants) {
        companion = chatParticipants.find((p: any) => p.id !== me?.id);
      }

      return {
        id: chat.id,
        name: chat.type === 'direct' ? companion?.username || 'Direct Chat' : chat.name || '–ì—Ä—É–ø–ø–∞',
        avatar: chat.type === 'direct' ? companion?.avatar_url || undefined : undefined,
        lastMessage: chatLastMessage?.content || '',
        time: chatLastMessage?.created_at
          ? new Date(chatLastMessage.created_at).toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit',
            })
          : '',
        isOnline: chat.type === 'direct' ? companion?.status === 'online' : false,
        messageStatus: chatLastMessage?.status === 'read' ? 'read' : 'unread', // –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É ChatListItem
        isOutgoing: chatLastMessage?.sender_id === me?.id, // true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status:
          chat.type === 'direct'
            ? (companion?.status as 'online' | 'offline' | 'dnd' | 'invisible') || 'offline'
            : 'offline', // —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      };
    });
  }, [chats, me?.id, lastMessages, allParticipants]);

  useEffect(() => {
    if (!me?.id) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!chatsLoaded) {
      dispatch(fetchChats(me.id));
    }
  }, [me?.id, chatsLoaded, dispatch]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  useEffect(() => {
    if (chats.length === 0) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    chats.forEach((chat) => {
      const lastMessageLoaded = selectLastMessageLoaded(
        { message: { lastMessages } } as any,
        chat.id
      );
      const participantsLoaded = selectChatParticipantsLoaded(
        { participant: { participants: allParticipants } } as any,
        chat.id
      );

      if (!lastMessageLoaded) {
        dispatch(fetchLastMessage(chat.id));
      }
      if (!participantsLoaded) {
        dispatch(fetchChatParticipants(chat.id));
      }
    });
  }, [chats, lastMessages, allParticipants, dispatch]);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (!me?.id || chats.length === 0) return;

    console.log('üîî Subscribing to status changes for chat participants');

    statusService.subscribeToStatusChanges((payload) => {
      console.log('üì° Status change received:', payload);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–æ—Ä–µ –Ω–∞–ø—Ä—è–º—É—é
      const updatedUserId = payload.new.id;
      const newStatus = payload.new.status;

      // –î–∏—Å–ø–∞—Ç—á–∏–º action –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö
      dispatch(
        updateUserStatus({
          userId: updatedUserId,
          status: newStatus,
        })
      );
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    return () => {
      console.log('üîï Unsubscribing from status changes');
      statusService.unsubscribeFromChannel('profiles:UPDATE');
    };
  }, [me?.id, chats.length, dispatch]);

  const handleChatSelect = (chatId: string) => {
    router.push(`/chats/${chatId}`);
  };

  if (loading) {
    return (
      <div className='flex-1 flex items-center justify-center p-4'>
        <LoadingSpinner size='large' />
      </div>
    );
  }

  if (error) {
    return (
      <div className='flex-1 flex items-center justify-center p-4'>
        <Alert type='error' className='text-center'>
          <p className='mb-2'>{error}</p>
          <button
            onClick={() => dispatch(fetchChats(me?.id || ''))}
            className='text-blue-500 hover:underline'
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </Alert>
      </div>
    );
  }

  return (
    <div className='md:w-80 w-full flex flex-col bg-[var(--c-bg-subtle)]'>
      <DobrunniaChatList
        items={chatItems}
        onSelect={handleChatSelect}
        selectedId={selectedId || undefined}
        loading={loading}
        className='flex-1'
      />
    </div>
  );
}
