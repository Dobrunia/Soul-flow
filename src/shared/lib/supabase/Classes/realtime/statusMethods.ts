import { RealtimeCore } from './realtimeCore';

export class StatusMethods extends RealtimeCore {
  private pingInterval: NodeJS.Timeout | null = null;
  private readonly PING_INTERVAL = 10000; // 10 —Å–µ–∫—É–Ω–¥

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async sendPing(): Promise<void> {
    try {
      await this.ensureValidToken();

      const { error } = await this.supabase.rpc('send_ping');

      if (error) {
        console.error('‚ùå Error sending ping:', error);
        throw error;
      }

      console.log('‚úÖ Ping sent successfully');
    } catch (error) {
      console.error('‚ùå Failed to send ping:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏–Ω–≥–æ–≤
   */
  startPinging(): void {
    if (this.pingInterval) {
      console.warn('‚ö†Ô∏è Ping interval already running');
      return;
    }

    console.log('üöÄ Starting status ping interval');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —Å—Ä–∞–∑—É
    this.sendPing().catch(console.error);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    this.pingInterval = setInterval(() => {
      this.sendPing().catch(console.error);
    }, this.PING_INTERVAL);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏–Ω–≥–æ–≤
   */
  stopPinging(): void {
    if (this.pingInterval) {
      console.log('üõë Stopping status ping interval');
      clearInterval(this.pingInterval);
      this.pingInterval = null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–∏–Ω–≥
   */
  isPinging(): boolean {
    return this.pingInterval !== null;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é
   */
  async updateStatus(status: 'online' | 'offline' | 'dnd' | 'invisible'): Promise<void> {
    try {
      await this.ensureValidToken();

      const { error } = await this.supabase
        .from('profiles')
        .update({ status })
        .eq('id', (await this.getCurrentUser())?.id);

      if (error) {
        console.error('‚ùå Error updating status:', error);
        throw error;
      }

      console.log(`‚úÖ Status updated to: ${status}`);
    } catch (error) {
      console.error('‚ùå Failed to update status:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  subscribeToStatusChanges(callback: (payload: any) => void): void {
    this.subscribeToTable('profiles', 'UPDATE', (payload) => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
      if (payload.new.status !== payload.old.status) {
        callback(payload);
      }
    });
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  subscribeToActivityChanges(callback: (payload: any) => void): void {
    this.subscribeToTable('user_activity', '*', callback);
  }
}
